// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Form$ReactApolloDemo = require("./Form.bs.js");
var Offers$ReactApolloDemo = require("./Offers.bs.js");

function toString(prim) {
  return prim;
}

var ppx_printed_query = "query getProducts  {\nproducts  {\nid  \ntitle  \noffers  {\nid  \nreseller  \nprice  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "products");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeNumber(value$2);
                    tmp = match$2 !== undefined ? match$2 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Product is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "title");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type Product is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "offers");
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeArray(value$4);
                    tmp$2 = match$6 !== undefined ? match$6.map((function (value) {
                              var match = Js_json.decodeObject(value);
                              if (match !== undefined) {
                                var value$1 = Caml_option.valFromOption(match);
                                var match$1 = Js_dict.get(value$1, "id");
                                var tmp;
                                if (match$1 !== undefined) {
                                  var value$2 = Caml_option.valFromOption(match$1);
                                  var match$2 = Js_json.decodeNumber(value$2);
                                  tmp = match$2 !== undefined ? match$2 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                                } else {
                                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type Offer is missing");
                                }
                                var match$3 = Js_dict.get(value$1, "reseller");
                                var tmp$1;
                                if (match$3 !== undefined) {
                                  var value$3 = Caml_option.valFromOption(match$3);
                                  var match$4 = Js_json.decodeString(value$3);
                                  tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                } else {
                                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field reseller on type Offer is missing");
                                }
                                var match$5 = Js_dict.get(value$1, "price");
                                var tmp$2;
                                if (match$5 !== undefined) {
                                  var value$4 = Caml_option.valFromOption(match$5);
                                  var match$6 = Js_json.decodeString(value$4);
                                  tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                } else {
                                  tmp$2 = Js_exn.raiseError("graphql_ppx: Field price on type Offer is missing");
                                }
                                return {
                                        id: tmp,
                                        reseller: tmp$1,
                                        price: tmp$2
                                      };
                              } else {
                                return Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                            })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field offers on type Product is missing");
                  }
                  return {
                          id: tmp,
                          title: tmp$1,
                          offers: tmp$2
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field products on type Query is missing");
    }
    return {
            products: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetProducts = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetProductsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function Products(Props) {
  return React.createElement(GetProductsQuery[/* make */4], {
              children: (function (param) {
                  var result = param[/* result */0];
                  var tmp;
                  tmp = typeof result === "number" ? "Loading..." : (
                      result.tag ? React.createElement("ul", undefined, $$Array.map((function (product) {
                                    return React.createElement("li", {
                                                key: product.id.toString()
                                              }, React.createElement("h3", undefined, product.title), React.createElement(Offers$ReactApolloDemo.make, {
                                                    offers: product.offers
                                                  }), React.createElement(Form$ReactApolloDemo.make, {
                                                    productId: product.id
                                                  }));
                                  }), result[0].products)) : "Error :( " + result[0].message
                    );
                  return React.createElement("div", undefined, React.createElement("h1", undefined, "Products: "), tmp);
                })
            });
}

var make$1 = Products;

exports.toString = toString;
exports.GetProducts = GetProducts;
exports.GetProductsQuery = GetProductsQuery;
exports.make = make$1;
/* GetProductsQuery Not a pure module */
