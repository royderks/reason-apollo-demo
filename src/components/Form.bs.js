// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

function toString(prim) {
  return prim;
}

var ppx_printed_query = "mutation addProductOffer($productId: Int!, $reseller: String!, $price: String!)  {\naddProductOffer(productId: $productId, reseller: $reseller, price: $price)  {\nproductId  \nreseller  \nprice  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "addProductOffer");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var value$1 = Caml_option.valFromOption(match$2);
        var match$3 = Js_dict.get(value$1, "productId");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeNumber(value$2);
          tmp$1 = match$4 !== undefined ? match$4 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field productId on type Offer is missing");
        }
        var match$5 = Js_dict.get(value$1, "reseller");
        var tmp$2;
        if (match$5 !== undefined) {
          var value$3 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$3);
          tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field reseller on type Offer is missing");
        }
        var match$7 = Js_dict.get(value$1, "price");
        var tmp$3;
        if (match$7 !== undefined) {
          var value$4 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeString(value$4);
          tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field price on type Offer is missing");
        }
        tmp = {
          productId: tmp$1,
          reseller: tmp$2,
          price: tmp$3
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field addProductOffer on type Mutation is missing");
    }
    return {
            addProductOffer: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(productId, reseller, price, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "productId",
                  productId
                ],
                /* tuple */[
                  "reseller",
                  reseller
                ],
                /* tuple */[
                  "price",
                  price
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var productId = variables.productId;
  var reseller = variables.reseller;
  var price = variables.price;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "productId",
                  productId
                ],
                /* tuple */[
                  "reseller",
                  reseller
                ],
                /* tuple */[
                  "price",
                  price
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var AddProductOffer = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var AddProductOfferMutation = ReasonApollo.CreateMutation([
      ppx_printed_query,
      parse
    ]);

function Form(Props) {
  var productId = Props.productId;
  var match = React.useState((function () {
          return "";
        }));
  var setReseller = match[1];
  var reseller = match[0];
  var match$1 = React.useState((function () {
          return "";
        }));
  var setPrice = match$1[1];
  var price = match$1[0];
  var addProductOffer = make(productId, reseller, price, /* () */0);
  return React.createElement(AddProductOfferMutation[/* make */6], {
              children: (function (mutation, param) {
                  var result = param[/* result */0];
                  var tmp;
                  tmp = typeof result === "number" ? (
                      result === 0 ? "Loading..." : ""
                    ) : (
                      result.tag ? "Added!" : "Error :( " + result[0].message
                    );
                  return React.createElement("div", undefined, React.createElement("input", {
                                  id: "reseller",
                                  placeholder: "Enter the reseller",
                                  type: "text",
                                  value: reseller,
                                  onChange: (function (e) {
                                      return Curry._1(setReseller, e.target.value);
                                    })
                                }), React.createElement("input", {
                                  id: "price",
                                  placeholder: "Enter the price",
                                  type: "text",
                                  value: price,
                                  onChange: (function (e) {
                                      return Curry._1(setPrice, e.target.value);
                                    })
                                }), React.createElement("button", {
                                  onClick: (function (param) {
                                      Curry._4(mutation, Caml_option.some(addProductOffer.variables), /* array */["getProducts"], undefined, /* () */0);
                                      return /* () */0;
                                    })
                                }, "Add offer"), React.createElement("span", undefined, tmp));
                })
            });
}

var make$1 = Form;

exports.toString = toString;
exports.AddProductOffer = AddProductOffer;
exports.AddProductOfferMutation = AddProductOfferMutation;
exports.make = make$1;
/* AddProductOfferMutation Not a pure module */
